<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈Splay</title>
      <link href="/2019/07/10/%E6%B5%85%E8%B0%88Splay/"/>
      <url>/2019/07/10/%E6%B5%85%E8%B0%88Splay/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-Splay"><a href="#浅谈-Splay" class="headerlink" title="浅谈 Splay"></a>浅谈 Splay</h1><h2 id="什么是-Splay"><a href="#什么是-Splay" class="headerlink" title="什么是 Splay"></a>什么是 Splay</h2><p><a href="https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91/7003945?fr=aladdin" target="_blank" rel="noopener">伸展树</a>（Splay Tree），也叫分裂树，是一种<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/10905079" target="_blank" rel="noopener">二叉排序树</a>，它能在O(log n)内完成插入、查找和删除操作。它由丹尼尔·斯立特（Daniel Sleator） 和 罗伯特·恩卓·塔扬（Robert Endre <strong>Tarjan</strong> <del>又是他</del>）在1985年发明的。<br>假设想要对一个二叉排序树执行一系列的查找操作。为了使整个查找时间更小，被查频率高的那些条目就应当经常处于靠近树根的位置。于是想到设计一个简单方法， 在每次查找之后对树进行重构，把被查找的条目搬移到离树根近一些的地方。 splay tree 应运而生。 splay tree 是一种自调整形式的二叉查找树，它会沿着从某个结点到树根之间的路径，通过一系列的旋转把这个结点搬移到树根去。  </p><p align="right">（From 百度百科）</p><p>因为 Splay 是一颗二叉排序树，所以它的每一个结点都应该满足如下性质：</p><ul><li>若左子树不空，则左子树上所有结点的值均小于或等于这个结点的值；</li><li>若右子树不空，则右子树上所有结点的值均大于或等于这个结点的值；</li></ul><p>我们知道，在对二叉树进行中序遍历时，会先遍历左子树，然后是自身，最后才是右子树。所以一颗二叉排序树的中序遍历是不严格单调递增的。我们在进行重构树时，也需要保证中序遍历不变。</p><h2 id="Splay-可以做什么"><a href="#Splay-可以做什么" class="headerlink" title="Splay 可以做什么"></a>Splay 可以做什么</h2><ul><li>维护一个区间（<del>废话</del>）；</li><li>支持区间翻转；</li><li>支持求一个结点的前驱和后继；</li><li>支持求一个结点的排名；</li><li>支持求第k大；</li></ul><h2 id="Splay-需要维护的内容"><a href="#Splay-需要维护的内容" class="headerlink" title="Splay 需要维护的内容"></a>Splay 需要维护的内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int val[N];//当前结点的值</span><br><span class="line">int cnt[N];//有多少个重复结点</span><br><span class="line">int pre[N];//当前结点的父结点</span><br><span class="line">int siz[N];//以当前结点为根的子树大小</span><br><span class="line">int son[N][2];//当前结点的子结点([0]为左儿子，[1]为右儿子)</span><br><span class="line">bool rev[N];//是否翻转</span><br></pre></td></tr></table></figure><h2 id="Splay-支持的操作"><a href="#Splay-支持的操作" class="headerlink" title="Splay 支持的操作"></a>Splay 支持的操作</h2><h3 id="get-dir-操作"><a href="#get-dir-操作" class="headerlink" title="get_dir 操作"></a>get_dir 操作</h3><p>这个操作的目的是确定一个结点是父结点的左儿子还是右儿子，返回值为0或1.</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inline int get_dir(int x)</span><br><span class="line">&#123;</span><br><span class="line">return son[pre[x]][1]==x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="push-up-操作"><a href="#push-up-操作" class="headerlink" title="push_up 操作"></a>push_up 操作</h3><p>这个操作的目的是更新子树大小。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inline void push_up(int x)</span><br><span class="line">&#123;</span><br><span class="line">siz[x]=siz[son[x][0]]+siz[son[x][1]]+cnt[x];</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rotate-操作"><a href="#rotate-操作" class="headerlink" title="rotate 操作"></a>rotate 操作</h3><p>核心操作。 Splay 通过旋转操作来保持平衡。<br>每次旋转有两种不同情况的旋转，分别是当前结点是父亲结点的左儿子和右儿子。</p><p>如果当前结点是父亲的左儿子，如下图，我们要把红点向上一层旋转：</p><p><img src="/2019/07/10/浅谈Splay/splay_1.png" alt></p><p>为了方便，我们不妨令这颗树的中序遍历为 $1-2-3-4-5-6-7$ 。如下图，2号点就是我们要旋转的点：</p><p><img src="/2019/07/10/浅谈Splay/splay_2.png" alt></p><p>我们可以清楚的看出 rotate 的变化规律：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">son[4][0]=3;</span><br><span class="line">pre[3]=4;//目标结点父亲的左儿子-&gt;目标结点的右儿子</span><br><span class="line">son[6][0]=2;</span><br><span class="line">pre[2]=6;//目标结点爷爷的（左/右）儿子-&gt;目标结点</span><br><span class="line">son[2][1]=4;</span><br><span class="line">pre[4]=2;//目标结点的右儿子-&gt;目标结点的父亲</span><br></pre></td></tr></table></figure></p><p>同理，我们可以看出当前结点是父亲的右儿子时的规律（图中6号结点是目标结点）：</p><p><img src="/2019/07/10/浅谈Splay/splay_3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">son[4][1]=5;</span><br><span class="line">pre[5]=4;//目标结点父亲的右儿子-&gt;目标结点的左儿子</span><br><span class="line">son[2][1]=6;</span><br><span class="line">pre[6]=2;//目标结点爷爷的（左/右）儿子-&gt;目标结点</span><br><span class="line">son[6][0]=4;</span><br><span class="line">pre[4]=6;//目标结点的左儿子-&gt;目标结点的父亲</span><br></pre></td></tr></table></figure><p>归纳一下，可以得出以下步骤：</p><ul><li>求出目标结点位于父亲结点的方向，并作为基本方向；</li><li>目标结点父亲的同向儿子-&gt;目标结点的异向儿子；</li><li>目标结点爷爷的（左/右）儿子-&gt;目标结点；</li><li>目标结点的异向儿子-&gt;目标结点的父亲；</li></ul><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">inline void rotate(int x)</span><br><span class="line">&#123;</span><br><span class="line">int f=pre[x],g=pre[f],d=get_dir(x),s=son[x][d^1];</span><br><span class="line"></span><br><span class="line">son[f][d]=s;</span><br><span class="line">pre[s]=f;</span><br><span class="line">son[g][get_dir(f)]=x;</span><br><span class="line">pre[x]=g;</span><br><span class="line">son[x][d^1]=f;</span><br><span class="line">pre[f]=x;</span><br><span class="line">push_up(f);</span><br><span class="line">push_up(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="splay-操作"><a href="#splay-操作" class="headerlink" title="splay 操作"></a>splay 操作</h3><p>这个操作的目的是将一个结点一直旋转至目标结点的儿子，如果目标结点为0，则表示旋转至根结点。<br>其实只需要每次进行旋转后判断父亲是不是目标结点，如果爷爷，父亲与当前结点“三点一线”，我们就要先旋转父结点，再旋转当前结点，使这颗 Splay 更平衡（<del>这是一个很玄学的问题</del>）。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void splay(int x,int tar=0)</span><br><span class="line">&#123;</span><br><span class="line">while(pre[x]!=tar)</span><br><span class="line">&#123;</span><br><span class="line">int f=pre[x],g=pre[f];</span><br><span class="line"></span><br><span class="line">if(g!=tar)</span><br><span class="line">&#123;</span><br><span class="line">if(get_dir(x)==get_dir(f)) rotate(f);</span><br><span class="line">else rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">if(!tar) root=x;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-操作"><a href="#find-操作" class="headerlink" title="find 操作"></a>find 操作</h3><p>这是一个辅助操作，目的是把最大的小于等于指定值的结点（如果有这个值，则返回这个值，否则返回最大的小于这个值的结点） splay 到根结点。<br>操作很简单，只需要在每个结点处判断当前结点值是否小于指定值，再决定向左或向右,最后把找到的值 spaly 上来。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void find(int v)</span><br><span class="line">&#123;</span><br><span class="line">int x=root;</span><br><span class="line"></span><br><span class="line">if(!x) return;</span><br><span class="line">while(son[x][v&gt;val[x]]&amp;&amp;val[x]!=v)</span><br><span class="line">&#123;</span><br><span class="line">x=son[x][v&gt;val[x]];</span><br><span class="line">&#125;</span><br><span class="line">splay(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert-操作"><a href="#insert-操作" class="headerlink" title="insert 操作"></a>insert 操作</h3><p>这个操作的目的是向 splay 里插入一个值。<br>和上一个操作类似，也是 需要在每个结点处判断当前结点值是否小于指定值，再决定向左或向右，如果结点存在则直接自增cnt的值。否则新建结点并与父结点连边。<br>因为新建结点时可能会拉出一条链，为了保持 splay 的平衡，我们需要将该结点 splay 到根。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void insert(int v)</span><br><span class="line">&#123;</span><br><span class="line">int x=root,f=0;</span><br><span class="line"></span><br><span class="line">while(x&amp;&amp;val[x]!=v)</span><br><span class="line">&#123;</span><br><span class="line">f=x;</span><br><span class="line">x=son[x][v&gt;val[x]];</span><br><span class="line">&#125;</span><br><span class="line">if(x) ++cnt[x];</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">x=(++ncnt);</span><br><span class="line">if(f) son[f][v&gt;val[f]]=x;</span><br><span class="line">val[x]=v;</span><br><span class="line">cnt[x]=1;</span><br><span class="line">pre[x]=f;</span><br><span class="line">siz[x]=1;</span><br><span class="line">son[x][0]=0;</span><br><span class="line">son[x][1]=0;</span><br><span class="line">&#125;</span><br><span class="line">splay(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kth-操作"><a href="#kth-操作" class="headerlink" title="kth 操作"></a>kth 操作</h3><p>显然，这个操作是求第k大的数。<br>同样是从根结点开始向下搜，每次需要判断k与左子树大小，与（左子树大小+该结点 cnt ）的大小关系，再决定向左或向右，或是返回这个结点。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int kth(int ord)</span><br><span class="line">&#123;</span><br><span class="line">int x=root;</span><br><span class="line"></span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">if(son[x][0]&amp;&amp;ord&lt;=siz[son[x][0]]) x=son[x][0];</span><br><span class="line">else if(ord&gt;siz[son[x][0]]+cnt[x])</span><br><span class="line">&#123;</span><br><span class="line">ord-=(siz[son[x][0]]+cnt[x]);</span><br><span class="line">x=son[x][1];</span><br><span class="line">&#125;</span><br><span class="line">else return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rank-操作"><a href="#rank-操作" class="headerlink" title="rank 操作"></a>rank 操作</h3><p>返回指定值的排名。<br>只需要把这个值转到根，再返回根结点左子树大小即可。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int rank(int v)</span><br><span class="line">&#123;</span><br><span class="line">find(v);</span><br><span class="line">return siz[son[root][0]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prev-操作"><a href="#prev-操作" class="headerlink" title="prev 操作"></a>prev 操作</h3><p>求指定值的前驱（比它小的数中最大的）。<br>只需要找到左子树中最右边的那一个，返回即可。</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int prev(int v)</span><br><span class="line">&#123;</span><br><span class="line">int u;</span><br><span class="line"></span><br><span class="line">find(v);</span><br><span class="line">u=son[root][0];</span><br><span class="line">while(son[u][1]) u=son[u][1];</span><br><span class="line"></span><br><span class="line">return u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="succ-操作"><a href="#succ-操作" class="headerlink" title="succ 操作"></a>succ 操作</h3><p>求指定值的后继（比它大的数中最小的）。<br>同理，只需要找到右子树中最左边的那一个，返回即可。</p><p>代码实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int succ(int v)</span><br><span class="line">&#123;</span><br><span class="line">int u;</span><br><span class="line"></span><br><span class="line">find(v);</span><br><span class="line">u=son[root][1];</span><br><span class="line">while(son[u][0]) u=son[u][0];</span><br><span class="line"></span><br><span class="line">return u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="remove-操作"><a href="#remove-操作" class="headerlink" title="remove 操作"></a>remove 操作</h3><p>删除指定值。<br>如图，可以看出，如果把 prev(x) splay 到根结点，把 succ(x) spaly 到 prev(x) 的右儿子，那么 succ(x) 的左儿子只会有目标结点一个结点，删除方法显而易见。</p><p><img src="/2019/07/10/浅谈Splay/splay_4.png" alt></p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void remove(int v)</span><br><span class="line">&#123;</span><br><span class="line">int p=prev(v),s=succ(v),tar;</span><br><span class="line"></span><br><span class="line">splay(p);</span><br><span class="line">splay(s,p);</span><br><span class="line">tar=son[p][0];</span><br><span class="line">if(cnt[tar]&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">--cnt[tar];</span><br><span class="line">splay(tar);</span><br><span class="line">&#125;</span><br><span class="line">else son[p][0]=0;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reverse-操作"><a href="#reverse-操作" class="headerlink" title="reverse 操作"></a>reverse 操作</h3><p>区间翻转， Splay 的标准操作之一。<br>和线段树区间加一样，这个地方也运用了“懒标记”的思想。和 remove 操作类似，将$[L,R]$区间提取出来，可以把$L-1$ splay 到根结点，把$R+1$ splay 到根结点的儿子，如图。</p><p><img src="/2019/07/10/浅谈Splay/splay_5.png" alt></p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void reverse(int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">int f=kth(l),s=kth(r+2);//因为prev，succ都是相对值，所以初始化要插入一个极大值和一个极小值。</span><br><span class="line"></span><br><span class="line">splay(f);</span><br><span class="line">splay(s,f);</span><br><span class="line">rev[son[s][0]]^=1;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们需要将标记下方，于是我们需要 pushdown 操作。在每次标记下放时交换左右儿子；</p><p>代码实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">inline void push_down(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(!rev[x]) return;</span><br><span class="line">swap(son[x][0],son[x][1]);</span><br><span class="line">rev[son[x][0]]^=1;</span><br><span class="line">rev[son[x][1]]^=1;</span><br><span class="line">rev[x]=0;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续思考，我们什么时候需要下放标记？当且仅当翻转前后对答案有影响。在上述操作中，只有求第$k$大（ kth 操作）会有影响，因此，我们需要修改 kth 操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int kth(int ord)</span><br><span class="line">&#123;</span><br><span class="line">int x=root;</span><br><span class="line"></span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">push_down(x);//新增</span><br><span class="line">if(son[x][0]&amp;&amp;ord&lt;=siz[son[x][0]]) x=son[x][0];</span><br><span class="line">else if(ord&gt;siz[son[x][0]]+cnt[x])</span><br><span class="line">&#123;</span><br><span class="line">ord-=(siz[son[x][0]]+cnt[x]);</span><br><span class="line">x=son[x][1];</span><br><span class="line">&#125;</span><br><span class="line">else return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output-操作"><a href="#output-操作" class="headerlink" title="output 操作"></a>output 操作</h3><p>最后一个操作，输出！<br>注意输出时要下放标记。</p><p>代码实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void output(int x)</span><br><span class="line">&#123;</span><br><span class="line">push_down(x);</span><br><span class="line">if(son[x][0]) output(son[x][0]);</span><br><span class="line">if(abs(val[x])!=inf)</span><br><span class="line">while(cnt[x]--) printf(&quot;%d &quot;,val[x]);</span><br><span class="line">if(son[x][1]) output(son[x][1]);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>splay 还可以实现更多操作，大都与区间打标记有关。 splay 标记下放与线段树类似，类比即可。</p><p>最后放一下模板题：<a href="https://www.luogu.org/problemnew/show/P3391" target="_blank" rel="noopener">LGOJ P3391 【模板】文艺平衡树（Splay）</a></p><p>std:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using std::swap;</span><br><span class="line">#define inf 0x3f3f3f3f</span><br><span class="line"></span><br><span class="line">int ncnt=0,root=0,val[100005],cnt[100005],pre[100005],siz[100005],son[100005][2];</span><br><span class="line">bool rev[100005];</span><br><span class="line"></span><br><span class="line">inline int get_dir(int x)</span><br><span class="line">&#123;</span><br><span class="line">return son[pre[x]][1]==x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void push_up(int x)</span><br><span class="line">&#123;</span><br><span class="line">siz[x]=siz[son[x][0]]+siz[son[x][1]]+cnt[x];</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void push_down(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(!rev[x]) return;</span><br><span class="line">swap(son[x][0],son[x][1]);</span><br><span class="line">rev[son[x][0]]^=1;</span><br><span class="line">rev[son[x][1]]^=1;</span><br><span class="line">rev[x]=0;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void rotate(int x)</span><br><span class="line">&#123;</span><br><span class="line">int f=pre[x],g=pre[f],d=get_dir(x),s=son[x][d^1];</span><br><span class="line"></span><br><span class="line">son[f][d]=s;</span><br><span class="line">pre[s]=f;</span><br><span class="line">son[g][get_dir(f)]=x;</span><br><span class="line">pre[x]=g;</span><br><span class="line">son[x][d^1]=f;</span><br><span class="line">pre[f]=x;</span><br><span class="line">push_up(f);</span><br><span class="line">push_up(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void splay(int x,int tar=0)</span><br><span class="line">&#123;</span><br><span class="line">while(pre[x]!=tar)</span><br><span class="line">&#123;</span><br><span class="line">int f=pre[x],g=pre[f];</span><br><span class="line"></span><br><span class="line">if(g!=tar)</span><br><span class="line">&#123;</span><br><span class="line">if(get_dir(x)==get_dir(f)) rotate(f);</span><br><span class="line">else rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">rotate(x);</span><br><span class="line">&#125;</span><br><span class="line">if(!tar) root=x;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void find(int v)</span><br><span class="line">&#123;</span><br><span class="line">int x=root;</span><br><span class="line"></span><br><span class="line">if(!x) return;</span><br><span class="line">while(son[x][v&gt;val[x]]&amp;&amp;val[x]!=v)</span><br><span class="line">&#123;</span><br><span class="line">x=son[x][v&gt;val[x]];</span><br><span class="line">&#125;</span><br><span class="line">splay(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insert(int v)</span><br><span class="line">&#123;</span><br><span class="line">int x=root,f=0;</span><br><span class="line"></span><br><span class="line">while(x&amp;&amp;val[x]!=v)</span><br><span class="line">&#123;</span><br><span class="line">f=x;</span><br><span class="line">x=son[x][v&gt;val[x]];</span><br><span class="line">&#125;</span><br><span class="line">if(x) ++cnt[x];</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">x=(++ncnt);</span><br><span class="line">if(f) son[f][v&gt;val[f]]=x;</span><br><span class="line">val[x]=v;</span><br><span class="line">cnt[x]=1;</span><br><span class="line">pre[x]=f;</span><br><span class="line">siz[x]=1;</span><br><span class="line">son[x][0]=0;</span><br><span class="line">son[x][1]=0;</span><br><span class="line">&#125;</span><br><span class="line">splay(x);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int kth(int ord)</span><br><span class="line">&#123;</span><br><span class="line">int x=root;</span><br><span class="line"></span><br><span class="line">while(true)</span><br><span class="line">&#123;</span><br><span class="line">push_down(x);</span><br><span class="line">if(son[x][0]&amp;&amp;ord&lt;=siz[son[x][0]]) x=son[x][0];</span><br><span class="line">else if(ord&gt;siz[son[x][0]]+cnt[x])</span><br><span class="line">&#123;</span><br><span class="line">ord-=(siz[son[x][0]]+cnt[x]);</span><br><span class="line">x=son[x][1];</span><br><span class="line">&#125;</span><br><span class="line">else return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int rank(int v)</span><br><span class="line">&#123;</span><br><span class="line">find(v);</span><br><span class="line">return siz[son[root][0]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int prev(int v)</span><br><span class="line">&#123;</span><br><span class="line">int u;</span><br><span class="line"></span><br><span class="line">find(v);</span><br><span class="line">u=son[root][0];</span><br><span class="line">while(son[u][1]) u=son[u][1];</span><br><span class="line"></span><br><span class="line">return u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int succ(int v)</span><br><span class="line">&#123;</span><br><span class="line">int u;</span><br><span class="line"></span><br><span class="line">find(v);</span><br><span class="line">u=son[root][1];</span><br><span class="line">while(son[u][0]) u=son[u][0];</span><br><span class="line"></span><br><span class="line">return u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void remove(int v)</span><br><span class="line">&#123;</span><br><span class="line">int p=prev(v),s=succ(v),tar;</span><br><span class="line"></span><br><span class="line">splay(p);</span><br><span class="line">splay(s,p);</span><br><span class="line">tar=son[p][0];</span><br><span class="line">if(cnt[tar]&gt;1)</span><br><span class="line">&#123;</span><br><span class="line">--cnt[tar];</span><br><span class="line">splay(tar);</span><br><span class="line">&#125;</span><br><span class="line">else son[p][0]=0;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverse(int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">int f=kth(l),s=kth(r+2);</span><br><span class="line"></span><br><span class="line">splay(f);</span><br><span class="line">splay(s,f);</span><br><span class="line">rev[son[s][0]]^=1;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void output(int x)</span><br><span class="line">&#123;</span><br><span class="line">push_down(x);</span><br><span class="line">if(son[x][0]) output(son[x][0]);</span><br><span class="line">if(abs(val[x])!=inf)</span><br><span class="line">while(cnt[x]--) printf(&quot;%d &quot;,val[x]);</span><br><span class="line">if(son[x][1]) output(son[x][1]);</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">insert(-inf);</span><br><span class="line">insert(inf);</span><br><span class="line">for(register int i=1;i&lt;=n;++i) insert(i);</span><br><span class="line"></span><br><span class="line">while(m--)</span><br><span class="line">&#123;</span><br><span class="line">int L,R;</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;L,&amp;R);</span><br><span class="line"></span><br><span class="line">reverse(L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output(root);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
